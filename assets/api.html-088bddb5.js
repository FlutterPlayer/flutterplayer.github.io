import{_ as a,W as n,X as s,a1 as e}from"./framework-07d536f1.js";const t={},p=e(`<h2 id="播放器接口" tabindex="-1"><a class="header-anchor" href="#播放器接口" aria-hidden="true">#</a> 播放器接口</h2><h3 id="fijkplayer" tabindex="-1"><a class="header-anchor" href="#fijkplayer" aria-hidden="true">#</a> FijkPlayer</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">FijkPlayer</span> fplayer <span class="token operator">=</span> <span class="token class-name">FijkPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>播放器 <code>fplayer</code> 创建后，java/objc 层的播放器以及 C 层的播放器也随之一起完成对象创建或 struct 内存分配。终其一生，这个 <code>fplayer</code> 就只能对应这一个 C 层的 <code>FFPlayer</code>。 并且在使用完成之后， <code>fplayer</code> 必须释放其内部 <code>FFPlayer</code> 所占用的资源。</p><h3 id="release" tabindex="-1"><a class="header-anchor" href="#release" aria-hidden="true">#</a> release</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// usage</span>
fplayer<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>release 方法内部会根据当前的播放器状态判断是否需要调用 <code>stop</code> 接口。 所以可以在播放器的任何状态下调用 <code>release</code> 接口进行资源释放。</p><h2 id="播放控制" tabindex="-1"><a class="header-anchor" href="#播放控制" aria-hidden="true">#</a> 播放控制</h2><h3 id="setdatasource" tabindex="-1"><a class="header-anchor" href="#setdatasource" aria-hidden="true">#</a> setDataSource</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span>int<span class="token punctuation">&gt;</span></span> <span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token punctuation">{</span>bool autoPlay <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> bool showCover <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">/// usage</span>
<span class="token comment">/// autoPlay 为 true 时等同于连续调用 setDataSource、prepareAsync、start</span>
fplayer<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;http://samplevideo.com/sample.flv&quot;</span></span><span class="token punctuation">,</span> autoPlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">///</span>
<span class="token comment">/// 设置本地资源作为播放源，</span>
<span class="token comment">/// pubspec.yml 中需要指定assets 内容</span>
<span class="token comment">///   assets:</span>
<span class="token comment">///     - assets/butterfly.mp4</span>
<span class="token comment">///</span>
<span class="token comment">/// scheme 是 \`asset\`, \`://\` 是 scheme 分隔符， \`/\` 是路径起始符号</span>
fplayer<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;asset:///assets/butterfly.mp4&quot;</span></span><span class="token punctuation">,</span> autoPlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置播放器播放资源，接口内部会尝试自动判断资源类型，比如网络资源，本地文件资源等。<br> 可选参数 <code>autoPlay</code> 设置为 true 时会在设置资源后调用 <code>prepareAsync</code> 和 <code>start</code> 接口自动播放。等价于调用</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">await</span> <span class="token function">setDataSource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">setOption</span><span class="token punctuation">(</span><span class="token class-name">FijkOption</span><span class="token punctuation">.</span>playerCategory<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;start-on-prepared&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">prepareAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选参数 <code>showCover</code> 设置为 true 时，播放器会在解析完成数据后渲染第一帧视频，然后暂停。 暂停之后播放器依然继续加载数据放入缓冲中。等价于调用</p><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">await</span> <span class="token function">setDataSource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">setOption</span><span class="token punctuation">(</span><span class="token class-name">FijkOption</span><span class="token punctuation">.</span>playerCategory<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;cover-after-prepared&quot;</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">prepareAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prepareasync" tabindex="-1"><a class="header-anchor" href="#prepareasync" aria-hidden="true">#</a> prepareAsync</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">prepareAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// usage</span>
fplayer<span class="token punctuation">.</span><span class="token function">prepareAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>控制播放器开始启动各种资源，解析媒体内容，准备进行媒体播放。 函数调用结束后，播放器状态变为 <code>asyncPreparing</code>，等待准备工作完成后，播放器状态会变为 <code>prepared</code>。 调用次方法前必须先设置 dataSource。</p><h3 id="start" tabindex="-1"><a class="header-anchor" href="#start" aria-hidden="true">#</a> start</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// usage</span>
fplayer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>控制播放器开始播放。</p><h3 id="pause" tabindex="-1"><a class="header-anchor" href="#pause" aria-hidden="true">#</a> pause</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// usage</span>
fplayer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>控制播放器进入暂停状态。</p><h3 id="stop" tabindex="-1"><a class="header-anchor" href="#stop" aria-hidden="true">#</a> stop</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// usage</span>
fplayer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>控制播放器终止播放，<code>stop</code> 之后不可以直接通过 <code>start</code> 接口进入播放状态。</p><h3 id="reset" tabindex="-1"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> reset</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// usage</span>
fplayer<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重置播放器进入 <code>idle</code> 状态，可以再次 <code>setDataSource</code>。</p><h3 id="seekto" tabindex="-1"><a class="header-anchor" href="#seekto" aria-hidden="true">#</a> seekTo</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">seekTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token comment">// usage</span>
fplayer<span class="token punctuation">.</span><span class="token function">seekTo</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>控制播放器进行播放进度，参数以毫秒为单位。只能在可播放状态下调用此接口。</p><p><strong>播放器状态控制接口都是 async 异步接口。如果需要连续调用多个播放器控制接口，需要使用 <code>await</code> 或者 <code>Future.then()</code> 等待异步完成。 不等待前一个调用完成就直接调用后一个方法可能会出现状态错误问题。</strong></p><h2 id="其他接口" tabindex="-1"><a class="header-anchor" href="#其他接口" aria-hidden="true">#</a> 其他接口</h2><h3 id="setvolume" tabindex="-1"><a class="header-anchor" href="#setvolume" aria-hidden="true">#</a> setVolume</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>fplayer<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>音量设置范围在 [0.0, 1.0]，设置超出此范围的音量只效果无法保障。</p><h3 id="setloop" tabindex="-1"><a class="header-anchor" href="#setloop" aria-hidden="true">#</a> setLoop</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">setLoop</span><span class="token punctuation">(</span>int loopCount<span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>fplayer<span class="token punctuation">.</span><span class="token function">setLoop</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认播放器的循环次数是1， 即不循环播放。如果设置循环次数0，表示无限循环。</p><h3 id="setspeed" tabindex="-1"><a class="header-anchor" href="#setspeed" aria-hidden="true">#</a> setSpeed</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">void</span><span class="token punctuation">&gt;</span></span> <span class="token function">setSpeed</span><span class="token punctuation">(</span>double speed<span class="token punctuation">)</span> <span class="token keyword">async</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code>fplayer<span class="token punctuation">.</span><span class="token function">setSpeed</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>倍速调整不宜过大，请根据实际效果设定合适的倍速值。</p><h3 id="enterfullscreen" tabindex="-1"><a class="header-anchor" href="#enterfullscreen" aria-hidden="true">#</a> enterFullScreen</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">enterFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这两个方法仅仅是修改了播放器中的一个属性，全屏 UI 变化主要代码在 FijkView 中实现，FijkView 去监听这个属性的变化而作出全屏状态改变。</p><h3 id="exitfullscreen" tabindex="-1"><a class="header-anchor" href="#exitfullscreen" aria-hidden="true">#</a> exitFullScreen</h3><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">exitFullScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,59),c=[p];function o(l,i){return n(),s("div",null,c)}const u=a(t,[["render",o],["__file","api.html.vue"]]);export{u as default};

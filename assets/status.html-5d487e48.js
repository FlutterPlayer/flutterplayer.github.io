import{_ as t,W as d,X as e,a1 as r}from"./framework-07d536f1.js";const a={},h=r('<h2 id="状态说明" tabindex="-1"><a class="header-anchor" href="#状态说明" aria-hidden="true">#</a> 状态说明</h2><table><thead><tr><th>状态名</th><th>播放器表现</th></tr></thead><tbody><tr><td>idle</td><td>闲置状态，刚完成构造的 FijkPlayer 处于此状态。 <br> 此状态下播放器占用少量内存，无额外线程启动。 <br> idle 状态只能通过 setDataSource 转换为 initialized 状态</td></tr><tr><td>initialized</td><td>初始化完成状态，和 idle 状态相比，仅是多了输入媒体数据源的信息。 同样无额外线程打开。</td></tr><tr><td>asyncPreparing</td><td>异步准备状态，在 initialized 状态调用 prepareAsync 到达此状态。 <br> 这不是一个稳定状态，此状态等待特定任务完成后自动转化为 prepared 状态。 <br> 这一状态的主要准备工作是 探测媒体文件类型，打开媒体文件，打开解码器以及新建解码线程，新建数据 read 线程，打开音频输出设备，新建视频输出线程等。</td></tr><tr><td>prepared</td><td>asyncPreparing 完成指定任务后自动转化为此状态。 <br> 此状态下已经开始缓冲解码了一部分音视频数据，可以随时进行播放。</td></tr><tr><td>started</td><td>媒体（视频、音频）正在播放中。</td></tr><tr><td>paused</td><td>媒体（视频、音频）播放暂停。</td></tr><tr><td>completed</td><td>媒体（视频、音频）播放完成。 可重新从头开始播放。</td></tr><tr><td>stopped</td><td>播放器各种线程占用资源都已经释放。 音频设备关闭。</td></tr><tr><td>end</td><td>播放器中所有需要手动释放的内存都释放完成。 <br> 处于此状态的播放器只能等待垃圾回收进行内存释放。</td></tr><tr><td>error</td><td>播放器出现错误。</td></tr></tbody></table><h3 id="可播放状态" tabindex="-1"><a class="header-anchor" href="#可播放状态" aria-hidden="true">#</a> 可播放状态</h3><p>prepared、 started、 paused、 completed。<br> 可播放状态中可以通过调用 <code>start</code> 转化为 <strong>started</strong> 状态，并且进行媒体播放。</p><h3 id="稳定状态" tabindex="-1"><a class="header-anchor" href="#稳定状态" aria-hidden="true">#</a> 稳定状态</h3><p>idle、 initialized、 prepared、 paused、 completed、 stopped、 end、error。<br> 稳定状态只可以通过 API 调用转换为其他的状态，不会自主发生状态变化。</p><h3 id="非稳定状态" tabindex="-1"><a class="header-anchor" href="#非稳定状态" aria-hidden="true">#</a> 非稳定状态</h3><p>asyncPreparing、 started。<br> 非稳定状态会在一定条件下自动转变为其他状态，也可以通过 API 调用进行状态跳转。</p><h2 id="完整转换-api" tabindex="-1"><a class="header-anchor" href="#完整转换-api" aria-hidden="true">#</a> 完整转换 API</h2><h3 id="idle" tabindex="-1"><a class="header-anchor" href="#idle" aria-hidden="true">#</a> <strong>idle</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>setDataSource()</td><td>initialized</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="initialized" tabindex="-1"><a class="header-anchor" href="#initialized" aria-hidden="true">#</a> <strong>initialized</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>prepareAsync()</td><td>asyncPreparing</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="asyncpreparing" tabindex="-1"><a class="header-anchor" href="#asyncpreparing" aria-hidden="true">#</a> <strong>asyncPreparing</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>处理完成</td><td>prepared</td></tr><tr><td>出现错误</td><td>error</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="prepared" tabindex="-1"><a class="header-anchor" href="#prepared" aria-hidden="true">#</a> <strong>prepared</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>seekTo()</td><td>prepared</td></tr><tr><td>start()</td><td>started</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="started" tabindex="-1"><a class="header-anchor" href="#started" aria-hidden="true">#</a> <strong>started</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>seekTo()</td><td>started</td></tr><tr><td>start()</td><td>started</td></tr><tr><td>pause()</td><td>paused</td></tr><tr><td>stop()</td><td>stopped</td></tr><tr><td>播放完成</td><td>completed</td></tr><tr><td>出现错误</td><td>error</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="paused" tabindex="-1"><a class="header-anchor" href="#paused" aria-hidden="true">#</a> <strong>paused</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>seekTo()</td><td>paused</td></tr><tr><td>start()</td><td>started</td></tr><tr><td>pause()</td><td>paused</td></tr><tr><td>stop()</td><td>stopped</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="completed" tabindex="-1"><a class="header-anchor" href="#completed" aria-hidden="true">#</a> <strong>completed</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>seekTo()</td><td>paused</td></tr><tr><td>start()</td><td>started （从头开始）</td></tr><tr><td>pause()</td><td>paused</td></tr><tr><td>stop()</td><td>stopped</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="stopped" tabindex="-1"><a class="header-anchor" href="#stopped" aria-hidden="true">#</a> <strong>stopped</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>stop()</td><td>stopped</td></tr><tr><td>prepareAsync()</td><td>asyncPreparing</td></tr><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> <strong>error</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>reset()</td><td>idle</td></tr><tr><td>release()</td><td>end</td></tr></tbody></table><h3 id="end" tabindex="-1"><a class="header-anchor" href="#end" aria-hidden="true">#</a> <strong>end</strong></h3><table><thead><tr><th>API名称</th><th>目标状态</th></tr></thead><tbody><tr><td>release()</td><td>end</td></tr></tbody></table>',29),s=[h];function i(n,o){return d(),e("div",null,s)}const l=t(a,[["render",i],["__file","status.html.vue"]]);export{l as default};
